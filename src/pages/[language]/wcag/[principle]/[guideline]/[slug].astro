---
import fetchApi from '../../../../../lib/payload';
import Layout from '../../../../../layouts/Layout.astro';
import RichText from '../../../../../components/RichText';
import SidebarMenu from '../../../../../components/SidebarMenu.astro';
import Breadcrumb from '../../../../../components/Breadcrumb.astro';

import { useTranslations } from '../../../../../i18n/utils';
import type Criterion from '../../../../../interfaces/wcag';

export async function getStaticPaths() {
  const pages = await fetchApi<Criterion[]>({
    endpoint: 'criteria',
    global: false,
    wrappedByKey: 'docs',
  });

  const languages = ['en', 'fi'];

  return pages.flatMap((page: Criterion) =>
    languages.map((lang) => ({
      params: {
        slug: page.slug[lang],
        language: lang,
        pageUrl: page.pageUrl[lang],
        principle: page.Principle[lang].slug[lang],
        guideline: page.Guideline[lang].slug[lang]
      },
      props: {
        ...page,
        lang,
      },
    }))
  );
}

type Props = Criterion;

const page = Astro.props;
const lang = page.lang;
const t = useTranslations(lang);

const nodes = (page.content[lang]) ? page.content[lang].root.children as RichTextNode[] : null;
---

<Layout type="other" metaDescription={ page.metaDescription[lang] } locale={ lang } title={ page.title[lang] }
  engUrl={ page.pageUrl['en'] } fiUrl={ page.pageUrl['fi'] } currentUrl={ page.pageUrl[lang] } currentSlug={ page.slug[lang] }
  alternateFi={`fi/${ page.pageUrl['fi'] }`} alternateEn={`en/${ page.pageUrl['en'] }`}
  >
  <SidebarMenu principleNumber={ page.Principle[lang].principleNumber } principleName={ page.Principle[lang].title[lang] } />
  <div class="max-w-[1564px] mx-auto md:px-8-px max-sm:order-1">
    <div class="text-lt-gray dark:text-dk-gray py-2 px-4-px max-w-xl mx-auto md:py-6 md:px-8-px lg:max-w-4xl">
      <Breadcrumb type="criterion"
        language={ lang }
        principleNumber={ page.Principle[lang].principleNumber }
        principleName={ page.Principle[lang].title[lang] }
        principleSlug={ page.Principle[lang].slug[lang] }
        guidelineNumber={ page.Guideline[lang].guidelineNumber }
        guidelineName={ page.Guideline[lang].title[lang] }
        guidelineSlug={ page.Guideline[lang].slug[lang] }
        currentNumber={ page.criterionNumber }
        currentPage={ page.title[lang] }
      />
      <h1 id="skip-target">{ page.criterionNumber } { page.title[lang] }</h1>
      <div class="text-xl bodytext">
        <div>{ t('wcag-level') } { page.criterionLevel }</div>
        <div>{ t('wcag-version') } { page.wcagVersion }</div>

      {nodes &&
        <div class="text-xl bodytext"><RichText client:load nodes={nodes} lang={lang} /></div>
      }
      </div>
    </div>
  </div>
</Layout>
