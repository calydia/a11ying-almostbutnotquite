---
import fetchApi from '../../../../lib/payload';
import Layout from '../../../../layouts/Layout.astro';
import RichText from '../../../../components/RichText';
import Criteria from '../../../../components/Criteria.astro';
import SidebarMenu from '../../../../components/SidebarMenu.astro';
import Breadcrumb from '../../../../components/Breadcrumb.astro';
import type RichTextNode from '../../../../interfaces/RichText';
import type { Guideline } from '../../../../interfaces/wcag';

export async function getStaticPaths() {
  const pages = await fetchApi<Guideline[]>({
    endpoint: 'guidelines',
    global: false,
    wrappedByKey: 'docs',
  });

  const languages = ['en', 'fi'] as const;

  return pages.flatMap((page: Guideline) =>
    languages.map((lang) => ({
      params: {
        slug: page.slug[lang],
        language: lang,
        principle: page.Principle[lang].slug[lang],
      },
      props: {
        ...page,
        lang,
      },
    }))
  );
}

type LangKey = 'en' | 'fi';
interface Props extends Guideline {
  lang: LangKey;
}
const { lang, ...page } = Astro.props as Props;

const nodes = (page.content[lang]) ? page.content[lang].root.children as RichTextNode[] : null;
---

<Layout type="other" metaDescription={ page.metaDescription[lang] } locale={ lang } title={ page.title[lang] }
fiUrl={ page.pageUrl['fi'] ? page.pageUrl['fi'] : null } engUrl={ page.pageUrl['en'] ? page.pageUrl['en'] : null }
currentUrl={ page.pageUrl[lang] } currentSlug={ page.slug[lang] }
alternateFi={`fi/${ page.pageUrl['fi'] }`} alternateEn={`en/${ page.pageUrl['en'] }`}
>
  <SidebarMenu principleNumber={ page.Principle[lang].principleNumber } principleName={ page.Principle[lang].title[lang] } />
  <div class="max-w-[1564px] mx-auto md:px-8-px max-sm:order-1">
    <div class="text-lt-gray dark:text-dk-gray py-2 px-4-px max-w-xl mx-auto md:py-6 md:px-8-px lg:max-w-4xl">
      <Breadcrumb type="guideline"
        language={ lang }
        principleNumber={ page.Principle[lang].principleNumber }
        principleName={ page.Principle[lang].title[lang] }
        principleSlug={ page.Principle[lang].slug[lang] }
        currentNumber={ page.guidelineNumber }
        currentPage={ page.title[lang] }

      />
      <h1 id="skip-target">{ page.guidelineNumber } { page.title[lang] }</h1>
      {nodes &&
        <div class="text-xl bodytext"><RichText client:load nodes={nodes} lang={lang} /></div>
      }
      <Criteria principleNumber={ page.Principle[lang].principleNumber } guidelineNumber={ page.guidelineNumber } linkLevel="two" />
    </div>
  </div>
</Layout>


