---
import fetchApi from '../lib/payload';
import Criteria from './Criteria.astro';
import RichText from './RichText';
import type RichTextNode from '../interfaces/RichText';
import type { Guideline } from '../interfaces/wcag';

const guidelines = await fetchApi<Guideline[]>({
  endpoint: 'guidelines',
  wrappedByKey: 'docs',
  global: false,
  lang: Astro.props.lang
});

const filterdedGuidelines = guidelines.filter((guideline: Guideline) => guideline.Principle.principleNumber === Astro.props.principleNumber);
---

<section>
  {filterdedGuidelines.map((guideline) => {
    const nodes = (guideline.content) ? guideline.content.root.children as RichTextNode[] : null;

    return (
      <div>
        <h2>{ guideline.guidelineNumber } { guideline.title }</h2>
        {nodes &&
          <div class="text-xl bodytext"><RichText client:load nodes={nodes} lang={Astro.props.lang} /></div>
        }
        <Criteria principleNumber={ Astro.props.principleNumber } guidelineNumber={ guideline.guidelineNumber } />
      </div>
    );
  })}
</section>
